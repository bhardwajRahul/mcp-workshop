// Code generated by MockGen. DO NOT EDIT.
// Source: ../core/store.go
//
// Generated by this command:
//
//	mockgen -source=../core/store.go -destination=mock_store.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/go-training/mcp-workshop/pkg/core"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockStore) CreateClient(ctx context.Context, client *core.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockStoreMockRecorder) CreateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockStore)(nil).CreateClient), ctx, client)
}

// DeleteAuthorizationCode mocks base method.
func (m *MockStore) DeleteAuthorizationCode(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizationCode", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorizationCode indicates an expected call of DeleteAuthorizationCode.
func (mr *MockStoreMockRecorder) DeleteAuthorizationCode(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizationCode", reflect.TypeOf((*MockStore)(nil).DeleteAuthorizationCode), ctx, clientID)
}

// DeleteClient mocks base method.
func (m *MockStore) DeleteClient(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockStoreMockRecorder) DeleteClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockStore)(nil).DeleteClient), ctx, clientID)
}

// GetAuthorizationCode mocks base method.
func (m *MockStore) GetAuthorizationCode(ctx context.Context, clientID string) (*core.AuthorizationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationCode", ctx, clientID)
	ret0, _ := ret[0].(*core.AuthorizationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationCode indicates an expected call of GetAuthorizationCode.
func (mr *MockStoreMockRecorder) GetAuthorizationCode(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationCode", reflect.TypeOf((*MockStore)(nil).GetAuthorizationCode), ctx, clientID)
}

// GetClient mocks base method.
func (m *MockStore) GetClient(ctx context.Context, clientID string) (*core.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, clientID)
	ret0, _ := ret[0].(*core.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockStoreMockRecorder) GetClient(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockStore)(nil).GetClient), ctx, clientID)
}

// SaveAuthorizationCode mocks base method.
func (m *MockStore) SaveAuthorizationCode(ctx context.Context, code *core.AuthorizationCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuthorizationCode", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuthorizationCode indicates an expected call of SaveAuthorizationCode.
func (mr *MockStoreMockRecorder) SaveAuthorizationCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuthorizationCode", reflect.TypeOf((*MockStore)(nil).SaveAuthorizationCode), ctx, code)
}

// UpdateClient mocks base method.
func (m *MockStore) UpdateClient(ctx context.Context, client *core.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockStoreMockRecorder) UpdateClient(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockStore)(nil).UpdateClient), ctx, client)
}
